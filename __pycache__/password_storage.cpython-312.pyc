import os
import pathlib
import shelve
import time
from getpass import getpass
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.backends import default_backend

DATA_DIR = pathlib.Path('data')
DATA_DIR.mkdir(parents=True, exist_ok=True)
PASSWORDS_FILE = DATA_DIR / 'passwords.dat'
DEFAULT_EXPIRY_DURATION = 30 * 24 * 60 * 60  # 30 days in seconds

def read_saved_passwords() -> dict:
    """Read saved passwords from the file."""
    if not PASSWORDS_FILE.exists():
        return {}
    with shelve.open(str(PASSWORDS_FILE)) as f:
        return dict(f)

def filter_unexpired_passwords(passwords: dict) -> dict:
    """Filter out the expired passwords."""
    now = int(time.time())
    return {k: v for k, v in passwords.items() if now < v['expiry']}

def hash_password(password: str) -> tuple:
    """Hash the password and return the key and salt."""
    salt = os.urandom(16)
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,

