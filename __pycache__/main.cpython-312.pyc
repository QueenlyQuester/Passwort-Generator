import os
import getpass
import secrets
from pathlib import Path
from cryptography.fernet import Fernet
from datetime import datetime, timedelta
from password_storage import PasswordStorage
from password_generator import PasswordGenerator

class PasswordManager:
    DEFAULT_EXPIRY_DURATION = 30

    def __init__(self, data_directory='.'):
        self.data_directory = Path(data_directory).absolute()
        self.data_directory.mkdir(parents=True, exist_ok=True)
        self.data_file_path = self.data_directory / 'passwords.dat'
        self.password_storage = PasswordStorage(self.data_file_path)
        self.password_generator = PasswordGenerator()
        self.key = self.generate_key()
        self.enforce_password_complexity()

    def enforce_password_complexity(self):
        # Define password requirements
        uppercase = set(chr(i) for i in range(65, 91))
        lowercase = set(chr(i) for i in range(97, 123))
        number = set(chr(i) for i in range(48, 58))
        symbol = set(chr(i) for i in range(33, 48)) | set(chr(i) for i in range(58, 65)) | set(chr(i) for i in range(91, 97)) | set(chr(i) for i in range(123, 127))
        requirements = {uppercase, lowercase, number, symbol}

        # Generate a random password and check if it meets the requirements
        while True:
            password = self.password_generator.generate_password()
            if requirements.issubset(set(password)):
                break

        self.password = password

    def generate_key(self):
        return Fernet.generate_key()

    def read_saved_passwords(self):
        return self.password_storage.load_passwords()

    def filter_unexpired_passwords(self, passwords):
        return {password['service']: password for password in passwords if self.is_password_expired(password) is False}

    def is_password_expired(self, password):
        if 'expiry' not in password:
            return False
        expiry_time = password['expiry']
        return datetime.fromtimestamp(expiry_time) < datetime.now()

    def hash_password(self, password):
        return Fernet(self.key).encrypt(password.encode()).decode()

    def encrypt_password(self, password):
        return Fernet(self.key).encrypt(password.encode())

    def decrypt_password(self, encrypted_password):
        return Fernet(self.key).decrypt(encrypted_password).decode()

    def read_password_from_stdin(self):
        return getpass.getpass('Enter your password: ')

    def save_password(self, service, password):
        password_data = {
            'service': service,
            'password': self.hash_password(password),
            'expiry': int(datetime.now() + timedelta(days=self.DEFAULT_EXPIRY_DURATION).timestamp())
        }
        self.password_storage.save_password(password_data)

if __name__ == '__main__':
    password_manager = PasswordManager()
    saved_passwords = password_manager.read_saved_passwords()
    unexpired_passwords = password_manager.filter_unexpired_passwords(saved_passwords)
    while True:
        service = input('Enter the name of the service: ')
        if service in unexpired_passwords:
            print(f'The password for {service} is {password_manager.decrypt_password(unexpired_passwords[service]["password"])}')
        else:
            password = password_manager.read_password_from_stdin()
            password_manager.save_password(service, password)
